---
import { 
  defaultScheduler, 
  type ScheduledContent,
  type ScheduleConfig 
} from '../utils/contentScheduling'
import { getAllProjects, getAllPlaylists, getAllPlayground } from '../sanity/queries'

// Simulate scheduled content (in real app, this would come from Sanity with scheduling fields)
const [projects, playlists, playground] = await Promise.all([
  getAllProjects(),
  getAllPlaylists(), 
  getAllPlayground()
])

// Convert to scheduled content format with simulated scheduling data
const scheduledContent: ScheduledContent[] = [
  // Some drafts
  ...projects.slice(0, 3).map((p, i) => ({
    _id: p._id,
    title: p.title,
    type: 'project' as const,
    status: 'draft' as const,
    lastModified: new Date(Date.now() - i * 24 * 60 * 60 * 1000).toISOString()
  })),
  
  // Some scheduled content
  ...projects.slice(3, 6).map((p, i) => ({
    _id: p._id,
    title: p.title,
    type: 'project' as const,
    status: 'scheduled' as const,
    scheduledFor: new Date(Date.now() + (i + 1) * 2 * 24 * 60 * 60 * 1000).toISOString(),
    lastModified: new Date(Date.now() - i * 12 * 60 * 60 * 1000).toISOString()
  })),
  
  // Some published content
  ...projects.slice(6, 9).map((p, i) => ({
    _id: p._id,
    title: p.title,
    type: 'project' as const,
    status: 'published' as const,
    publishedAt: new Date(Date.now() - (i + 1) * 7 * 24 * 60 * 60 * 1000).toISOString(),
    lastModified: new Date(Date.now() - (i + 1) * 7 * 24 * 60 * 60 * 1000).toISOString()
  })),

  // Mix in some playlists
  ...playlists.slice(0, 2).map((p, i) => ({
    _id: p._id,
    title: p.name,
    type: 'playlist' as const,
    status: i === 0 ? 'scheduled' as const : 'draft' as const,
    scheduledFor: i === 0 ? new Date(Date.now() + 3 * 24 * 60 * 60 * 1000).toISOString() : undefined,
    lastModified: new Date(Date.now() - i * 6 * 60 * 60 * 1000).toISOString()
  }))
]

const stats = defaultScheduler.getDraftStatistics(scheduledContent)
const upcoming = defaultScheduler.getUpcomingContent(scheduledContent, 5)
const readyToPublish = defaultScheduler.getReadyToPublish(scheduledContent)

// Generate calendar for current month
const now = new Date()
const calendar = defaultScheduler.generateCalendar(scheduledContent, now.getMonth(), now.getFullYear())
---

<div class="content-schedule-dashboard bg-white rounded-xl shadow-lg p-6">
  <!-- Header -->
  <header class="flex items-center justify-between mb-8">
    <div>
      <h2 class="text-2xl font-serif text-stone-800">Content Schedule</h2>
      <p class="text-stone-600">Manage drafts, scheduling, and previews</p>
    </div>
    
    <div class="flex items-center gap-4">
      <button class="px-4 py-2 bg-orange-500 text-white rounded-lg hover:bg-orange-600 transition-colors">
        Schedule New
      </button>
      <button class="px-4 py-2 border border-stone-300 text-stone-700 rounded-lg hover:bg-stone-50 transition-colors">
        Bulk Actions
      </button>
    </div>
  </header>

  <!-- Statistics Overview -->
  <section class="mb-8">
    <h3 class="text-lg font-semibold mb-4">Overview</h3>
    <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
      <div class="p-4 bg-blue-50 rounded-lg">
        <div class="text-2xl font-bold text-blue-600">{stats.totalDrafts}</div>
        <div class="text-sm text-blue-700">Drafts</div>
      </div>
      
      <div class="p-4 bg-yellow-50 rounded-lg">
        <div class="text-2xl font-bold text-yellow-600">{stats.scheduledCount}</div>
        <div class="text-sm text-yellow-700">Scheduled</div>
      </div>
      
      <div class="p-4 bg-green-50 rounded-lg">
        <div class="text-2xl font-bold text-green-600">{readyToPublish.length}</div>
        <div class="text-sm text-green-700">Ready to Publish</div>
      </div>
      
      <div class="p-4 bg-purple-50 rounded-lg">
        <div class="text-2xl font-bold text-purple-600">{upcoming.length}</div>
        <div class="text-sm text-purple-700">Upcoming</div>
      </div>
    </div>
  </section>

  <!-- Ready to Publish -->
  {readyToPublish.length > 0 && (
    <section class="mb-8">
      <div class="flex items-center gap-2 mb-4">
        <h3 class="text-lg font-semibold">Ready to Publish</h3>
        <span class="px-2 py-1 bg-green-100 text-green-700 text-xs rounded-full">
          {readyToPublish.length} items
        </span>
      </div>
      
      <div class="space-y-3">
        {readyToPublish.map((content) => {
          const status = defaultScheduler.getContentStatus(content)
          return (
            <div class="flex items-center justify-between p-4 bg-green-50 border border-green-200 rounded-lg">
              <div class="flex items-center gap-3">
                <div class="w-3 h-3 bg-green-500 rounded-full animate-pulse"></div>
                <div>
                  <h4 class="font-medium text-green-800">{content.title}</h4>
                  <p class="text-sm text-green-600">
                    {content.type} ‚Ä¢ {status.timeUntilPublish}
                  </p>
                </div>
              </div>
              
              <div class="flex items-center gap-2">
                <button class="px-3 py-1 bg-green-600 text-white text-sm rounded hover:bg-green-700 transition-colors">
                  Publish Now
                </button>
                <button class="px-3 py-1 border border-green-300 text-green-700 text-sm rounded hover:bg-green-100 transition-colors">
                  Preview
                </button>
              </div>
            </div>
          )
        })}
      </div>
    </section>
  )}

  <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
    <!-- Upcoming Content -->
    <section>
      <h3 class="text-lg font-semibold mb-4">Upcoming Publications</h3>
      
      {upcoming.length === 0 ? (
        <div class="p-6 text-center text-stone-500 bg-stone-50 rounded-lg">
          <p>No upcoming scheduled content</p>
          <button class="mt-2 text-orange-500 hover:text-orange-600">
            Schedule something ‚Üí
          </button>
        </div>
      ) : (
        <div class="space-y-3">
          {upcoming.map((content) => {
            const status = defaultScheduler.getContentStatus(content)
            const previewUrl = defaultScheduler.generatePreviewUrl(content)
            
            return (
              <div class="p-4 border border-stone-200 rounded-lg hover:shadow-md transition-shadow">
                <div class="flex items-start justify-between">
                  <div class="flex-1">
                    <h4 class="font-medium text-stone-800 mb-1">{content.title}</h4>
                    <div class="flex items-center gap-2 text-sm text-stone-600 mb-2">
                      <span class={`px-2 py-1 rounded-full text-xs ${
                        status.color === 'blue' ? 'bg-blue-100 text-blue-700' :
                        status.color === 'green' ? 'bg-green-100 text-green-700' :
                        'bg-gray-100 text-gray-700'
                      }`}>
                        {content.type}
                      </span>
                      <span>in {status.timeUntilPublish}</span>
                    </div>
                    
                    <div class="text-xs text-stone-500">
                      Scheduled: {new Date(content.scheduledFor!).toLocaleDateString('en-US', {
                        weekday: 'short',
                        month: 'short', 
                        day: 'numeric',
                        hour: '2-digit',
                        minute: '2-digit'
                      })}
                    </div>
                  </div>
                  
                  <div class="flex items-center gap-2 ml-4">
                    <a 
                      href={previewUrl}
                      target="_blank"
                      rel="noopener noreferrer"
                      class="p-2 text-stone-400 hover:text-orange-500 transition-colors"
                      title="Preview"
                    >
                      üëÅÔ∏è
                    </a>
                    <button 
                      class="p-2 text-stone-400 hover:text-blue-500 transition-colors"
                      title="Edit Schedule"
                    >
                      ‚è∞
                    </button>
                  </div>
                </div>
              </div>
            )
          })}
        </div>
      )}
    </section>

    <!-- Draft Content -->
    <section>
      <h3 class="text-lg font-semibold mb-4">Drafts & Unpublished</h3>
      
      <div class="space-y-3">
        {scheduledContent
          .filter(c => c.status === 'draft')
          .slice(0, 6)
          .map((content) => {
            const previewUrl = defaultScheduler.generatePreviewUrl(content)
            
            return (
              <div class="p-4 border border-stone-200 rounded-lg hover:shadow-md transition-shadow">
                <div class="flex items-start justify-between">
                  <div class="flex-1">
                    <h4 class="font-medium text-stone-800 mb-1">{content.title}</h4>
                    <div class="flex items-center gap-2 text-sm text-stone-600 mb-2">
                      <span class="px-2 py-1 bg-gray-100 text-gray-700 rounded-full text-xs">
                        {content.type}
                      </span>
                      <span class="px-2 py-1 bg-yellow-100 text-yellow-700 rounded-full text-xs">
                        Draft
                      </span>
                    </div>
                    
                    <div class="text-xs text-stone-500">
                      Modified: {new Date(content.lastModified).toLocaleDateString('en-US', {
                        month: 'short',
                        day: 'numeric',
                        hour: '2-digit',
                        minute: '2-digit'
                      })}
                    </div>
                  </div>
                  
                  <div class="flex items-center gap-2 ml-4">
                    <a 
                      href={previewUrl}
                      target="_blank"
                      rel="noopener noreferrer"
                      class="p-2 text-stone-400 hover:text-orange-500 transition-colors"
                      title="Preview"
                    >
                      üëÅÔ∏è
                    </a>
                    <button 
                      class="p-2 text-stone-400 hover:text-green-500 transition-colors"
                      title="Schedule"
                    >
                      üìÖ
                    </button>
                  </div>
                </div>
              </div>
            )
          })}
      </div>
    </section>
  </div>

  <!-- Mini Calendar -->
  {calendar.length > 0 && (
    <section class="mt-8">
      <h3 class="text-lg font-semibold mb-4">
        {new Date().toLocaleDateString('en-US', { month: 'long', year: 'numeric' })} Schedule
      </h3>
      
      <div class="bg-stone-50 rounded-lg p-4">
        <div class="space-y-2">
          {calendar.map(({ date, items }) => (
            <div class="flex items-center gap-4 p-2 bg-white rounded border">
              <div class="text-sm font-medium text-stone-600 w-20">
                {new Date(date).toLocaleDateString('en-US', { 
                  month: 'short', 
                  day: 'numeric' 
                })}
              </div>
              
              <div class="flex-1">
                <div class="flex items-center gap-2">
                  {items.map((item, i) => (
                    <span 
                      key={i}
                      class="px-2 py-1 bg-blue-100 text-blue-700 text-xs rounded-full"
                      title={item.title}
                    >
                      {item.type}
                    </span>
                  ))}
                </div>
              </div>
              
              <div class="text-xs text-stone-500">
                {items.length} item{items.length !== 1 ? 's' : ''}
              </div>
            </div>
          ))}
        </div>
      </div>
    </section>
  )}
</div>

<style>
  .content-schedule-dashboard {
    animation: fadeIn 0.5s ease-out;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Hover effects */
  .content-schedule-dashboard button:hover {
    transform: translateY(-1px);
  }

  .content-schedule-dashboard a:hover {
    transform: scale(1.1);
  }
</style>

<script>
  import { defaultScheduler, defaultPreviewManager } from '../utils/contentScheduling'

  class ScheduleDashboardManager {
    constructor() {
      this.setupInteractivity()
      this.setupAutoRefresh()
    }

    private setupInteractivity(): void {
      // Handle preview button clicks
      document.addEventListener('click', (e) => {
        const target = e.target as HTMLElement
        
        if (target.closest('[title="Preview"]')) {
          e.preventDefault()
          this.handlePreview(target)
        }
        
        if (target.closest('[title="Schedule"]')) {
          e.preventDefault()
          this.handleSchedule(target)
        }
        
        if (target.textContent?.includes('Publish Now')) {
          e.preventDefault()
          this.handlePublishNow(target)
        }
      })
    }

    private handlePreview(button: HTMLElement): void {
      const card = button.closest('.p-4')
      const title = card?.querySelector('h4')?.textContent || 'Unknown'
      
      // Create preview session
      const session = defaultPreviewManager.createPreviewSession('demo-content', 24)
      
      // Show preview notification
      this.showNotification(`Preview created for "${title}"`, 'success')
      
      // Track interaction
      if (window.trackContentInteraction) {
        window.trackContentInteraction('project', 'demo', 'Preview created', 'interact')
      }
    }

    private handleSchedule(button: HTMLElement): void {
      const card = button.closest('.p-4')
      const title = card?.querySelector('h4')?.textContent || 'Unknown'
      
      // Show scheduling interface (simplified)
      const scheduleDate = new Date()
      scheduleDate.setDate(scheduleDate.getDate() + 7) // Schedule for next week
      
      const result = defaultScheduler.scheduleContent('demo-content', scheduleDate)
      
      this.showNotification(`"${title}" scheduled for ${scheduleDate.toLocaleDateString()}`, 'success')
    }

    private handlePublishNow(button: HTMLElement): void {
      const card = button.closest('.p-4')
      const title = card?.querySelector('h4')?.textContent || 'Unknown'
      
      // Simulate publishing
      button.textContent = 'Publishing...'
      button.disabled = true
      
      setTimeout(() => {
        card?.remove()
        this.showNotification(`"${title}" published successfully!`, 'success')
        
        // Update counters
        this.updateCounters()
      }, 1500)
    }

    private showNotification(message: string, type: 'success' | 'error' | 'info' = 'info'): void {
      const notification = document.createElement('div')
      notification.className = `fixed top-4 right-4 p-4 rounded-lg shadow-lg z-50 ${
        type === 'success' ? 'bg-green-100 text-green-800 border border-green-200' :
        type === 'error' ? 'bg-red-100 text-red-800 border border-red-200' :
        'bg-blue-100 text-blue-800 border border-blue-200'
      }`
      notification.textContent = message
      
      document.body.appendChild(notification)
      
      // Animate in
      requestAnimationFrame(() => {
        notification.style.transform = 'translateX(0)'
        notification.style.opacity = '1'
      })
      
      // Remove after 3 seconds
      setTimeout(() => {
        notification.style.transform = 'translateX(100%)'
        notification.style.opacity = '0'
        setTimeout(() => notification.remove(), 300)
      }, 3000)
    }

    private updateCounters(): void {
      // In a real app, this would refresh data from the server
      const readyCount = document.querySelector('.bg-green-50 .text-2xl')
      if (readyCount) {
        const current = parseInt(readyCount.textContent || '0')
        if (current > 0) {
          readyCount.textContent = (current - 1).toString()
        }
      }
    }

    private setupAutoRefresh(): void {
      // Refresh every 30 seconds to update relative times
      setInterval(() => {
        this.refreshRelativeTimes()
      }, 30000)
    }

    private refreshRelativeTimes(): void {
      // Update "in X time" displays
      const timeElements = document.querySelectorAll('[data-scheduled-for]')
      timeElements.forEach(el => {
        const scheduledFor = el.getAttribute('data-scheduled-for')
        if (scheduledFor) {
          const now = new Date()
          const scheduled = new Date(scheduledFor)
          const diff = scheduled.getTime() - now.getTime()
          
          if (diff > 0) {
            const days = Math.floor(diff / (1000 * 60 * 60 * 24))
            const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))
            
            const timeText = days > 0 ? `in ${days}d ${hours}h` : `in ${hours}h`
            el.textContent = timeText
          } else {
            el.textContent = 'Now'
            el.classList.add('text-green-600', 'font-semibold')
          }
        }
      })
    }
  }

  // Initialize when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    new ScheduleDashboardManager()
  })

  // Re-initialize on page navigation
  document.addEventListener('astro:page-load', () => {
    new ScheduleDashboardManager()
  })
</script>