---
interface Props {
  variant?: 'primary' | 'secondary' | 'tertiary'
  size?: 'small' | 'medium' | 'large'
  href?: string
  external?: boolean
  type?: 'button' | 'submit' | 'reset'
  disabled?: boolean
  class?: string
  id?: string
}

const {
  variant = 'primary',
  size = 'medium',
  href,
  external = false,
  type = 'button',
  disabled = false,
  class: className = '',
  id
} = Astro.props

const variantClasses = {
  primary: 'bg-orange-500 text-white hover:bg-orange-600 hover:shadow-xl hover:shadow-orange-500/25 hover:scale-105 hover:-translate-y-1 focus:ring-orange-500/20',
  secondary: 'bg-stone-950 text-white hover:bg-stone-800 hover:shadow-xl hover:shadow-stone-950/25 hover:scale-105 hover:-translate-y-1 focus:ring-stone-950/20',
  tertiary: 'bg-stone-50 text-stone-900 hover:bg-stone-100 hover:shadow-lg hover:shadow-stone-500/15 hover:scale-105 hover:-translate-y-1 focus:ring-stone-50/50 border border-stone-200 hover:border-stone-300'
}

const sizeClasses = {
  small: 'text-sm px-6 py-2',        // Small: 8px vertical, 24px horizontal (3:1 ratio)
  medium: 'text-base px-8 py-3',     // Medium: 12px vertical, 32px horizontal (2.7:1 ratio)
  large: 'text-lg px-12 py-4'        // Large: 16px vertical, 48px horizontal (3:1 ratio)
}

const baseClasses = `
  inline-flex items-center justify-center font-medium rounded-full
  transition-all duration-200 ease-out
  focus:outline-none focus:ring-4
  disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:scale-100 disabled:hover:translate-y-0 disabled:hover:shadow-none
  relative overflow-hidden
`

const linkProps = external && href 
  ? { target: '_blank', rel: 'noopener noreferrer' }
  : {}
---

{href ? (
  <a
    href={href}
    class={`
      ${baseClasses}
      ${variantClasses[variant]}
      ${sizeClasses[size]}
      ${className}
    `}
    {...linkProps}
  >
    <slot />
  </a>
) : (
  <button
    type={type}
    disabled={disabled}
    id={id}
    class={`
      ${baseClasses}
      ${variantClasses[variant]}
      ${sizeClasses[size]}
      ${className}
    `}
  >
    <slot />
  </button>
)}

<style>
  @keyframes ripple {
    from {
      transform: scale(0);
      opacity: 1;
    }
    to {
      transform: scale(4);
      opacity: 0;
    }
  }

  .ripple-effect {
    animation: ripple 600ms ease-out;
  }
</style>

<script>
  function createRippleEffect(element: HTMLElement, event: MouseEvent) {
    const rect = element.getBoundingClientRect()
    const size = Math.max(rect.width, rect.height)
    const x = event.clientX - rect.left - size / 2
    const y = event.clientY - rect.top - size / 2
    
    const ripple = document.createElement('div')
    ripple.className = 'ripple-effect'
    ripple.style.cssText = `
      position: absolute;
      border-radius: 50%;
      background: rgba(255, 255, 255, 0.3);
      transform: scale(0);
      left: ${x}px;
      top: ${y}px;
      width: ${size}px;
      height: ${size}px;
      pointer-events: none;
      z-index: 1;
    `
    
    element.appendChild(ripple)
    
    // Remove ripple after animation
    setTimeout(() => {
      if (ripple.parentNode) {
        ripple.parentNode.removeChild(ripple)
      }
    }, 600)
  }

  // Add ripple effect to all buttons in this component
  document.addEventListener('click', (e) => {
    const target = e.target as Element
    if (target?.closest('button') || target?.closest('a[class*="bg-orange"], a[class*="bg-stone"]')) {
      const element = target.closest('button, a') as HTMLElement
      if (element && !(element as any).disabled) {
        createRippleEffect(element, e)
      }
    }
  })

  // Re-initialize on page navigation for Astro
  document.addEventListener('astro:page-load', () => {
    // Event listener is already global, no need to re-add
  })
</script> 