---
// Analytics Dashboard Component
// This would typically fetch data from your analytics service
// For demo purposes, we'll create sample data and read from localStorage
---

<div id="analytics-dashboard" class="hidden fixed top-4 right-4 w-80 bg-white rounded-lg shadow-xl border z-50 max-h-96 overflow-hidden">
  <div class="p-4 border-b bg-stone-50">
    <div class="flex items-center justify-between">
      <h3 class="font-semibold text-stone-800">Analytics Dashboard</h3>
      <button id="close-dashboard" class="text-stone-500 hover:text-stone-700">
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>
  </div>
  
  <div class="p-4 overflow-y-auto max-h-80">
    <div class="space-y-4">
      <!-- Performance Metrics -->
      <div>
        <h4 class="text-sm font-medium text-stone-700 mb-2">Performance Metrics</h4>
        <div class="grid grid-cols-2 gap-2 text-xs">
          <div class="bg-green-50 p-2 rounded">
            <div class="font-medium text-green-800">LCP</div>
            <div id="lcp-value" class="text-green-600">-</div>
          </div>
          <div class="bg-blue-50 p-2 rounded">
            <div class="font-medium text-blue-800">FID</div>
            <div id="fid-value" class="text-blue-600">-</div>
          </div>
          <div class="bg-yellow-50 p-2 rounded">
            <div class="font-medium text-yellow-800">CLS</div>
            <div id="cls-value" class="text-yellow-600">-</div>
          </div>
          <div class="bg-purple-50 p-2 rounded">
            <div class="font-medium text-purple-800">Load</div>
            <div id="load-value" class="text-purple-600">-</div>
          </div>
        </div>
      </div>

      <!-- Interaction Stats -->
      <div>
        <h4 class="text-sm font-medium text-stone-700 mb-2">Session Activity</h4>
        <div class="space-y-1 text-xs">
          <div class="flex justify-between">
            <span>Clicks:</span>
            <span id="click-count" class="font-medium">0</span>
          </div>
          <div class="flex justify-between">
            <span>Hovers:</span>
            <span id="hover-count" class="font-medium">0</span>
          </div>
          <div class="flex justify-between">
            <span>Max Scroll:</span>
            <span id="scroll-depth" class="font-medium">0%</span>
          </div>
          <div class="flex justify-between">
            <span>Errors:</span>
            <span id="error-count" class="font-medium text-red-600">0</span>
          </div>
        </div>
      </div>

      <!-- Recent Events -->
      <div>
        <h4 class="text-sm font-medium text-stone-700 mb-2">Recent Events</h4>
        <div id="recent-events" class="space-y-1 text-xs max-h-32 overflow-y-auto">
          <div class="text-stone-500 italic">Loading events...</div>
        </div>
      </div>

      <!-- Content Engagement -->
      <div>
        <h4 class="text-sm font-medium text-stone-700 mb-2">Content Views</h4>
        <div id="content-engagement" class="space-y-1 text-xs max-h-24 overflow-y-auto">
          <div class="text-stone-500 italic">No content views yet</div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Toggle Button -->
<button 
  id="analytics-toggle" 
  class="fixed bottom-4 right-4 bg-orange-600 text-white p-3 rounded-full shadow-lg hover:bg-orange-700 transition-colors z-40"
  title="Analytics Dashboard"
>
  📊
</button>

<script>
  // Analytics Dashboard Script
  class AnalyticsDashboard {
    private dashboard: HTMLElement
    private toggle: HTMLElement
    private isVisible: boolean = false
    private updateInterval: NodeJS.Timeout | null = null

    constructor() {
      this.dashboard = document.getElementById('analytics-dashboard')!
      this.toggle = document.getElementById('analytics-toggle')!
      
      this.initializeEvents()
      this.startUpdating()
    }

    private initializeEvents(): void {
      this.toggle.addEventListener('click', () => {
        this.toggleDashboard()
      })

      document.getElementById('close-dashboard')?.addEventListener('click', () => {
        this.hideDashboard()
      })

      // Close on escape key
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && this.isVisible) {
          this.hideDashboard()
        }
      })
    }

    private toggleDashboard(): void {
      if (this.isVisible) {
        this.hideDashboard()
      } else {
        this.showDashboard()
      }
    }

    private showDashboard(): void {
      this.dashboard.classList.remove('hidden')
      this.isVisible = true
      this.updateData()
    }

    private hideDashboard(): void {
      this.dashboard.classList.add('hidden')
      this.isVisible = false
    }

    private startUpdating(): void {
      // Update every 2 seconds when visible
      this.updateInterval = setInterval(() => {
        if (this.isVisible) {
          this.updateData()
        }
      }, 2000)
    }

    private updateData(): void {
      const analytics = this.getAnalyticsData()
      
      // Update performance metrics
      this.updateElement('lcp-value', analytics.performance.lcp ? `${Math.round(analytics.performance.lcp)}ms` : '-')
      this.updateElement('fid-value', analytics.performance.fid ? `${Math.round(analytics.performance.fid)}ms` : '-')
      this.updateElement('cls-value', analytics.performance.cls ? analytics.performance.cls.toFixed(3) : '-')
      this.updateElement('load-value', analytics.performance.pageLoadTime ? `${Math.round(analytics.performance.pageLoadTime)}ms` : '-')

      // Update interaction stats
      this.updateElement('click-count', analytics.interactions.clicks.toString())
      this.updateElement('hover-count', analytics.interactions.hovers.toString())
      this.updateElement('scroll-depth', `${analytics.interactions.maxScrollDepth}%`)
      this.updateElement('error-count', analytics.errors.toString())

      // Update recent events
      this.updateRecentEvents(analytics.recentEvents)

      // Update content engagement
      this.updateContentEngagement(analytics.contentViews)
    }

    private updateElement(id: string, value: string): void {
      const element = document.getElementById(id)
      if (element) {
        element.textContent = value
      }
    }

    private updateRecentEvents(events: any[]): void {
      const container = document.getElementById('recent-events')
      if (!container) return

      if (events.length === 0) {
        container.innerHTML = '<div class="text-stone-500 italic">No recent events</div>'
        return
      }

      container.innerHTML = events.slice(-5).reverse().map(event => {
        const time = new Date(event.timestamp).toLocaleTimeString()
        const icon = this.getEventIcon(event.type)
        return `
          <div class="flex items-center gap-2 p-1 bg-stone-50 rounded">
            <span>${icon}</span>
            <span class="flex-1 truncate">${event.type}</span>
            <span class="text-stone-400">${time}</span>
          </div>
        `
      }).join('')
    }

    private updateContentEngagement(contentViews: any[]): void {
      const container = document.getElementById('content-engagement')
      if (!container) return

      if (contentViews.length === 0) {
        container.innerHTML = '<div class="text-stone-500 italic">No content views yet</div>'
        return
      }

      container.innerHTML = contentViews.slice(-3).reverse().map(view => `
        <div class="flex items-center justify-between p-1 bg-stone-50 rounded">
          <span class="truncate">${view.contentTitle}</span>
          <span class="text-stone-400 text-xs">${view.contentType}</span>
        </div>
      `).join('')
    }

    private getEventIcon(type: string): string {
      const icons: Record<string, string> = {
        'click': '👆',
        'scroll': '📜',
        'hover': '🎯',
        'view': '👁️',
        'error': '❌',
        'performance': '⚡'
      }
      return icons[type] || '📊'
    }

    private getAnalyticsData() {
      const stored = localStorage.getItem('portfolio-analytics') || '[]'
      const events = JSON.parse(stored)

      // Process events for dashboard
      const performance = {
        lcp: events.find((e: any) => e.lcp)?.lcp,
        fid: events.find((e: any) => e.fid)?.fid,
        cls: events.find((e: any) => e.cls)?.cls,
        pageLoadTime: events.find((e: any) => e.pageLoadTime)?.pageLoadTime
      }

      const interactions = {
        clicks: events.filter((e: any) => e.type === 'click').length,
        hovers: events.filter((e: any) => e.type === 'hover').length,
        maxScrollDepth: Math.max(0, ...events.filter((e: any) => e.metadata?.scrollDepth).map((e: any) => e.metadata.scrollDepth))
      }

      const errors = events.filter((e: any) => e.type === 'javascript' || e.type === 'network').length

      const contentViews = events.filter((e: any) => e.action === 'view')

      const recentEvents = events.filter((e: any) => e.type).slice(-10)

      return {
        performance,
        interactions,
        errors,
        contentViews,
        recentEvents
      }
    }
  }

  // Initialize dashboard when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    new AnalyticsDashboard()
  })
</script>

<style>
  #analytics-dashboard {
    backdrop-filter: blur(10px);
    background-color: rgba(255, 255, 255, 0.95);
  }
</style>