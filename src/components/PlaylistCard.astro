---
import type { Playlist } from '../sanity/types';
import SanityImage from './SanityImage.astro';
import { urlFor } from '../sanity/image';

interface Props {
  playlist: Playlist;
}

const { playlist } = Astro.props;
---

<a 
  href={playlist.spotifyUrl} 
  target="_blank" 
  rel="noopener noreferrer" 
  class="playlist-card group block relative overflow-hidden rounded-lg bg-black text-white" 
  style={`--bg-url: url(${urlFor(playlist.coverArt).width(100).blur(100).url()})`}
  data-playlist-id={playlist._id}
  data-playlist-name={playlist.name}
>
  <div class="absolute inset-0 w-full h-full transition-transform duration-500 ease-out group-hover:scale-110 bg-cover" style="background-image: var(--bg-url);"></div>
  <div class="relative z-10 flex flex-col h-full">
    <div class="aspect-square">
      <SanityImage source={playlist.coverArt} alt={playlist.name} variant="thumbnail" class="w-full h-full object-cover" />
    </div>
    <div class="p-4 flex-grow backdrop-blur-xl bg-black/30">
      <h3 class="font-semibold text-lg truncate">{playlist.name}</h3>
      <div class="mt-2 flex items-center">
        {playlist.featured && (
          <span class="text-xs font-bold uppercase tracking-wider bg-orange-500 text-black px-2 py-1 rounded-full mr-2">Featured</span>
        )}
        <p class="text-sm text-stone-300 truncate">{playlist.featuredTrack}</p>
      </div>
    </div>
  </div>
  <div class="absolute inset-0 w-full h-full bg-gradient-to-t from-black/50 to-transparent transition-opacity duration-300 opacity-0 group-hover:opacity-100"></div>
  <div class="spotlight absolute inset-0 w-full h-full transition-opacity duration-400 z-20 pointer-events-none mix-blend-mode-hard-light opacity-0 group-hover:opacity-100"></div>
</a>

<style>
.playlist-card {
  transform-style: preserve-3d;
  perspective: 1000px;
  transition: transform 0.2s ease-out, box-shadow 0.2s ease-out;
}

.playlist-card:hover {
  transform: scale3d(1.05, 1.05, 1.05);
  box-shadow: 0px 10px 30px -5px rgba(0,0,0,0.3), 0px 20px 50px -10px rgba(0,0,0,0.5);
}

.spotlight {
  background: radial-gradient(
    farthest-corner ellipse at var(--mouse-x, 50%) var(--mouse-y, 50%), 
    rgba(255, 255, 255, 0.3), 
    transparent 70%
  );
}

@media (hover: hover) {
  .playlist-card:hover {
    transform: perspective(1000px) 
               rotateX(var(--rotate-x, 0deg)) 
               rotateY(var(--rotate-y, 0deg)) 
               scale3d(1.05, 1.05, 1.05);
  }
}
</style>

<script>
  // Optimized 3D card effect with analytics tracking
  let animationId: number;
  
  document.addEventListener('DOMContentLoaded', () => {
    const cards = document.querySelectorAll('.playlist-card') as NodeListOf<HTMLElement>;
    
    cards.forEach(card => {
      let hoverStartTime: number;
      
      // 3D hover effects
      card.addEventListener('mousemove', (e) => {
        if (animationId) {
          cancelAnimationFrame(animationId);
        }
        
        animationId = requestAnimationFrame(() => {
          const rect = card.getBoundingClientRect();
          const x = e.clientX - rect.left;
          const y = e.clientY - rect.top;
          
          const rotateY = (x / rect.width - 0.5) * 20;
          const rotateX = (y / rect.height - 0.5) * -20;
          const mouseX = (x / rect.width) * 100;
          const mouseY = (y / rect.height) * 100;
          
          card.style.setProperty('--rotate-x', `${rotateX}deg`);
          card.style.setProperty('--rotate-y', `${rotateY}deg`);
          card.style.setProperty('--mouse-x', `${mouseX}%`);
          card.style.setProperty('--mouse-y', `${mouseY}%`);
        });
      });
      
      card.addEventListener('mouseenter', () => {
        hoverStartTime = performance.now();
      });
      
      card.addEventListener('mouseleave', () => {
        if (animationId) {
          cancelAnimationFrame(animationId);
        }
        card.style.removeProperty('--rotate-x');
        card.style.removeProperty('--rotate-y');
        card.style.removeProperty('--mouse-x');
        card.style.removeProperty('--mouse-y');
        
        // Track hover duration if it was meaningful (>1 second)
        if (hoverStartTime && performance.now() - hoverStartTime > 1000) {
          const playlistId = card.dataset.playlistId;
          const playlistName = card.dataset.playlistName;
          if (playlistId && playlistName && window.trackContentInteraction) {
            window.trackContentInteraction('playlist', playlistId, playlistName, 'interact');
          }
        }
      });
      
      // Track clicks to Spotify
      card.addEventListener('click', () => {
        const playlistId = card.dataset.playlistId;
        const playlistName = card.dataset.playlistName;
        if (playlistId && playlistName && window.trackPlaylistPlay) {
          window.trackPlaylistPlay(playlistId, playlistName);
        }
      });
    });
  });
</script>
