---
import type { Playlist } from '../sanity/types';
import PlaylistCover from './PlaylistCover.astro';
import { urlFor } from '../sanity/image';

interface Props {
  playlist: Playlist;
}

const { playlist } = Astro.props;
---

<a href={playlist.spotifyUrl} target="_blank" rel="noopener noreferrer" class="group block relative overflow-hidden rounded-lg bg-black text-white transform-gpu" style="transform-style: preserve-3d; transform: perspective(1000px); transition: all 0.2s ease-out;">
  <div class="absolute inset-0 w-full h-full transition-all duration-500 ease-in-out transform-gpu group-hover:scale-110" style={`background-image: url(${urlFor(playlist.coverArt).width(100).blur(100).url()}); background-size: cover;`}></div>
  <div class="relative z-10 flex flex-col h-full" style="transform: translateZ(20px);">
    <div class="aspect-w-1 aspect-h-1">
      <PlaylistCover source={playlist.coverArt} alt={playlist.name} class="w-full h-full object-cover" />
    </div>
    <div class="p-4 flex-grow backdrop-blur-xl bg-black/30">
      <h3 class="font-semibold text-lg truncate">{playlist.name}</h3>
      <div class="mt-2 flex items-center">
        {playlist.featured && (
          <span class="text-xs font-bold uppercase tracking-wider bg-orange-500 text-black px-2 py-1 rounded-full mr-2">Featured</span>
        )}
        <p class="text-sm text-stone-300 truncate">{playlist.featuredTrack}</p>
      </div>
    </div>
  </div>
  <div class="absolute inset-0 w-full h-full bg-gradient-to-t from-black/50 to-transparent transition-all duration-300 ease-in-out opacity-0 group-hover:opacity-100"></div>
  <div class="absolute inset-0 w-full h-full transition-all duration-300 ease-in-out transform-gpu z-20" style="background: radial-gradient(farthest-corner ellipse at var(--mouse-x, 50%) var(--mouse-y, 50%), rgba(255, 255, 255, 0.4), transparent 70%); pointer-events: none; mix-blend-mode: hard-light; opacity: 0; transition: all 0.4s ease-out;" id="spotlight"></div>
</a>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const cards = document.querySelectorAll('.group') as NodeListOf<HTMLElement>;
    cards.forEach(card => {
      const spotlight = card.querySelector('#spotlight') as HTMLElement;
      card.addEventListener('mousemove', (e) => {
        const rect = card.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;
        const rotateY = (x / rect.width - 0.5) * 30;
        const rotateX = (y / rect.height - 0.5) * -30;
        card.style.transform = `perspective(1000px) rotateX(${rotateX}deg) rotateY(${rotateY}deg) scale3d(1.1, 1.1, 1.1)`;
        card.style.boxShadow = `0px 10px 30px -5px rgba(0,0,0,0.3), 0px 20px 50px -10px rgba(0,0,0,0.5)`;
        card.style.setProperty('--mouse-x', `${100 - (x / rect.width) * 100}%`);
        card.style.setProperty('--mouse-y', `${100 - (y / rect.height) * 100}%`);
        if (spotlight) {
          spotlight.style.opacity = '1';
        }
      });
      card.addEventListener('mouseleave', () => {
        card.style.transform = 'perspective(1000px) rotateX(0) rotateY(0) scale3d(1, 1, 1)';
        card.style.boxShadow = 'none';
        if (spotlight) {
          spotlight.style.opacity = '0';
        }
      });
    });
  });
</script>
