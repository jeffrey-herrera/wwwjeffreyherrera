---
interface Props {
  variant?: 'primary' | 'secondary' | 'tertiary';
  href?: string;
  external?: boolean;
  class?: string;
  imageUrl?: string;
  imageAlt?: string;
}

const { 
  variant = 'primary', 
  href, 
  external = false, 
  class: className = '',
  imageUrl,
  imageAlt = ''
} = Astro.props;

const linkProps = external 
  ? { target: '_blank', rel: 'noopener noreferrer' }
  : {};

const CardElement = href ? 'a' : 'div';
---

<CardElement
  href={href}
  class={`
    rounded-lg overflow-hidden transition-all duration-300 ease-out block no-underline relative
    ${variant === 'primary' ? 'bg-orange-500 text-white shadow-md hover:shadow-orange-500/25 hover:shadow-2xl' : ''}
    ${variant === 'secondary' ? 'bg-stone-950 text-white shadow-sm hover:shadow-stone-950/25 hover:shadow-xl' : ''}
    ${variant === 'tertiary' ? 'bg-gray-50 text-gray-700 border border-gray-200 shadow-sm hover:shadow-lg' : ''}
    card card--${variant} ${className}
    ${href ? 'cursor-pointer' : ''}
  `}
  {...(href ? linkProps : {})}
>
  {imageUrl && (
    <div class="w-full aspect-video overflow-hidden relative">
      <img src={imageUrl} alt={imageAlt} class="w-full h-full object-cover transition-transform duration-300 ease-out group-hover:scale-110" />
    </div>
  )}
  <div class="p-4 pb-8 min-h-[100px]">
    <slot />
  </div>
</CardElement>

<style>
  .card {
    transform: translateY(0);
  }

  .card--primary:hover {
    transform: translateY(-8px) scale(1.02);
  }

  .card--secondary:hover {
    transform: translateY(-6px) scale(1.015);
  }

  .card--tertiary:hover {
    transform: translateY(-2px);
  }

  .card:hover img {
    transform: scale(1.1);
  }

  .card--secondary:hover img {
    transform: scale(1.05);
  }

  .card--tertiary:hover img {
    transform: scale(1.02);
  }

  /* Focus states for accessibility */
  .card:focus-visible {
    @apply outline-2 outline-orange-500 outline-offset-2;
  }

  /* Ensure text content is properly spaced */
  .card div:last-child > :first-child {
    margin-top: 0;
  }

  .card div:last-child > :last-child {
    margin-bottom: 0;
  }

  /* Ripple effect styles */
  @keyframes ripple {
    from {
      transform: scale(0);
      opacity: 1;
    }
    to {
      transform: scale(4);
      opacity: 0;
    }
  }

  .ripple-effect {
    animation: ripple 600ms ease-out;
  }
</style>

<script>
  function createCardRippleEffect(element, event) {
    // Only add ripple if it's a clickable card
    if (!element.href && !element.onclick) return
    
    const rect = element.getBoundingClientRect()
    const size = Math.max(rect.width, rect.height)
    const x = event.clientX - rect.left - size / 2
    const y = event.clientY - rect.top - size / 2
    
    const ripple = document.createElement('div')
    ripple.className = 'ripple-effect'
    ripple.style.cssText = `
      position: absolute;
      border-radius: 50%;
      background: rgba(255, 255, 255, 0.2);
      transform: scale(0);
      left: ${x}px;
      top: ${y}px;
      width: ${size}px;
      height: ${size}px;
      pointer-events: none;
      z-index: 1;
    `
    
    element.appendChild(ripple)
    
    // Remove ripple after animation
    setTimeout(() => {
      if (ripple.parentNode) {
        ripple.parentNode.removeChild(ripple)
      }
    }, 600)
  }

  // Add ripple effect to clickable cards
  document.addEventListener('click', (e) => {
    const card = e.target.closest('.card')
    if (card && (card.href || card.onclick)) {
      createCardRippleEffect(card, e)
    }
  })

  // Re-initialize on page navigation for Astro
  document.addEventListener('astro:page-load', () => {
    // Event listener is already global, no need to re-add
  })
</script> 