---
import Layout from '../layouts/Layout.astro'
import DynamicColorCard from '../components/DynamicColorCard.astro'
import { getAllContentForRelationships } from '../sanity/queries'

const { projects, playlists, playground } = await getAllContentForRelationships()

// Get a mix of featured and recent content for showcase
const featuredProjects = projects.filter(p => p.featured).slice(0, 3)
const featuredPlaylists = playlists.filter(p => p.featured).slice(0, 3)
const recentPlayground = playground.slice(0, 2)

const showcaseItems = [
  ...featuredProjects.map(p => ({ item: p, type: 'project' as const })),
  ...featuredPlaylists.map(p => ({ item: p, type: 'playlist' as const })),
  ...recentPlayground.map(p => ({ item: p, type: 'playground' as const }))
]
---

<Layout 
  title="Color Showcase"
  description="Dynamic color palette generation that adapts to content imagery, creating cohesive visual themes across the portfolio."
>
  <div class="py-16">
    <header class="mb-16 text-center">
      <h1 class="text-4xl font-serif mb-4">Dynamic Color Showcase</h1>
      <p class="text-xl text-stone-500 mb-8 max-w-2xl mx-auto">
        Each card below dynamically extracts colors from its imagery to create unique, 
        cohesive visual themes that adapt to the content.
      </p>
      
      <div class="inline-flex items-center gap-2 px-4 py-2 bg-blue-50 text-blue-700 rounded-lg">
        <span>ðŸŽ¨</span>
        <span class="text-sm">Colors extracted in real-time from images</span>
      </div>
    </header>

    <main>
      <!-- Dynamic Color Cards Grid -->
      <section class="mb-16">
        <h2 class="text-2xl font-serif mb-8">Adaptive Content Cards</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {showcaseItems.map(({ item, type }) => (
            <DynamicColorCard 
              item={item} 
              type={type}
              class="showcase-card"
            />
          ))}
        </div>
      </section>

      <!-- Color Theory Explanation -->
      <section class="mb-16 bg-stone-50 rounded-xl p-8">
        <h2 class="text-2xl font-serif mb-6">How It Works</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
          <div>
            <h3 class="text-lg font-semibold mb-3">Color Extraction Process</h3>
            <ol class="space-y-2 text-sm text-stone-600">
              <li class="flex items-start gap-2">
                <span class="flex-shrink-0 w-5 h-5 bg-orange-500 text-white text-xs rounded-full flex items-center justify-center">1</span>
                <span>Image is sampled at reduced resolution for performance</span>
              </li>
              <li class="flex items-start gap-2">
                <span class="flex-shrink-0 w-5 h-5 bg-orange-500 text-white text-xs rounded-full flex items-center justify-center">2</span>
                <span>Colors are quantized and frequency-analyzed</span>
              </li>
              <li class="flex items-start gap-2">
                <span class="flex-shrink-0 w-5 h-5 bg-orange-500 text-white text-xs rounded-full flex items-center justify-center">3</span>
                <span>Dominant, secondary, and accent colors are intelligently selected</span>
              </li>
              <li class="flex items-start gap-2">
                <span class="flex-shrink-0 w-5 h-5 bg-orange-500 text-white text-xs rounded-full flex items-center justify-center">4</span>
                <span>Palette is applied as CSS custom properties for theming</span>
              </li>
            </ol>
          </div>
          
          <div>
            <h3 class="text-lg font-semibold mb-3">Smart Color Selection</h3>
            <ul class="space-y-2 text-sm text-stone-600">
              <li class="flex items-center gap-2">
                <div class="w-3 h-3 bg-blue-500 rounded-full"></div>
                <span><strong>Dominant:</strong> Most prominent color with good saturation</span>
              </li>
              <li class="flex items-center gap-2">
                <div class="w-3 h-3 bg-purple-500 rounded-full"></div>
                <span><strong>Secondary:</strong> Complementary or analogous harmony</span>
              </li>
              <li class="flex items-center gap-2">
                <div class="w-3 h-3 bg-green-500 rounded-full"></div>
                <span><strong>Accent:</strong> High contrast, vibrant highlighting</span>
              </li>
              <li class="flex items-center gap-2">
                <div class="w-3 h-3 bg-stone-400 rounded-full"></div>
                <span><strong>Text/Background:</strong> Optimal contrast for readability</span>
              </li>
            </ul>
          </div>
        </div>
      </section>

      <!-- Technical Benefits -->
      <section class="mb-16">
        <h2 class="text-2xl font-serif mb-6">Benefits for Portfolio</h2>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
          <div class="p-6 bg-white rounded-lg border border-stone-200">
            <div class="w-12 h-12 bg-orange-100 rounded-lg flex items-center justify-center mb-4">
              <span class="text-orange-600 text-xl">ðŸŽ¨</span>
            </div>
            <h3 class="font-semibold mb-2">Visual Cohesion</h3>
            <p class="text-sm text-stone-600">
              Creates unique visual themes for each piece of content while maintaining overall brand consistency.
            </p>
          </div>
          
          <div class="p-6 bg-white rounded-lg border border-stone-200">
            <div class="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mb-4">
              <span class="text-blue-600 text-xl">âš¡</span>
            </div>
            <h3 class="font-semibold mb-2">Performance Optimized</h3>
            <p class="text-sm text-stone-600">
              Color extraction is staggered and cached, with fallback colors ensuring immediate usability.
            </p>
          </div>
          
          <div class="p-6 bg-white rounded-lg border border-stone-200">
            <div class="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mb-4">
              <span class="text-green-600 text-xl">ðŸ§ </span>
            </div>
            <h3 class="font-semibold mb-2">Smart Algorithms</h3>
            <p class="text-sm text-stone-600">
              Uses color theory principles to select harmonious palettes with proper contrast ratios.
            </p>
          </div>
        </div>
      </section>

      <!-- Live Demo -->
      <section class="bg-gradient-to-r from-orange-50 to-blue-50 rounded-xl p-8">
        <h2 class="text-2xl font-serif mb-4">Live Color Extraction Demo</h2>
        <p class="text-stone-600 mb-6">
          Upload an image to see the color extraction algorithm in action.
        </p>
        
        <div id="color-demo" class="space-y-4">
          <input 
            type="file" 
            id="demo-image-input" 
            accept="image/*" 
            class="block w-full text-sm text-stone-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-orange-50 file:text-orange-700 hover:file:bg-orange-100"
          >
          
          <div id="demo-result" class="hidden">
            <div class="flex flex-col md:flex-row gap-6">
              <div class="flex-1">
                <img id="demo-image" class="w-full max-w-xs rounded-lg shadow-md" alt="Demo image">
              </div>
              
              <div class="flex-1">
                <h3 class="font-semibold mb-3">Extracted Palette</h3>
                <div id="demo-palette" class="grid grid-cols-3 gap-2 mb-4">
                  <!-- Palette colors will be inserted here -->
                </div>
                
                <div id="demo-css" class="p-3 bg-stone-800 text-green-400 text-xs rounded font-mono overflow-x-auto">
                  <!-- CSS variables will be inserted here -->
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>
    </main>
  </div>
</Layout>

<script>
  import { extractImageColors, generateCSSVariables } from '../utils/colorExtraction'

  document.addEventListener('DOMContentLoaded', () => {
    const imageInput = document.getElementById('demo-image-input') as HTMLInputElement
    const demoResult = document.getElementById('demo-result')
    const demoImage = document.getElementById('demo-image') as HTMLImageElement
    const demoPalette = document.getElementById('demo-palette')
    const demoCss = document.getElementById('demo-css')

    imageInput?.addEventListener('change', async (event) => {
      const file = (event.target as HTMLInputElement).files?.[0]
      if (!file) return

      const reader = new FileReader()
      reader.onload = async (e) => {
        const img = new Image()
        img.onload = async () => {
          try {
            // Extract colors
            const palette = await extractImageColors(img)
            
            // Update demo display
            demoImage.src = e.target?.result as string
            demoResult?.classList.remove('hidden')
            
            // Show palette
            if (demoPalette) {
              demoPalette.innerHTML = Object.entries(palette).map(([name, color]) => `
                <div class="text-center">
                  <div class="w-full h-16 rounded-lg mb-2" style="background-color: ${color}"></div>
                  <div class="text-xs font-medium">${name}</div>
                  <div class="text-xs text-stone-500">${color}</div>
                </div>
              `).join('')
            }
            
            // Show CSS variables
            if (demoCss) {
              const cssVars = generateCSSVariables(palette)
              demoCss.textContent = cssVars
            }
            
          } catch (error) {
            console.error('Color extraction failed:', error)
          }
        }
        img.src = e.target?.result as string
      }
      reader.readAsDataURL(file)
    })
  })
</script>

<style>
  .showcase-card {
    animation: fadeInUp 0.6s ease-out forwards;
    opacity: 0;
    transform: translateY(20px);
  }

  .showcase-card:nth-child(1) { animation-delay: 0.1s; }
  .showcase-card:nth-child(2) { animation-delay: 0.2s; }
  .showcase-card:nth-child(3) { animation-delay: 0.3s; }
  .showcase-card:nth-child(4) { animation-delay: 0.4s; }
  .showcase-card:nth-child(5) { animation-delay: 0.5s; }
  .showcase-card:nth-child(6) { animation-delay: 0.6s; }

  @keyframes fadeInUp {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>