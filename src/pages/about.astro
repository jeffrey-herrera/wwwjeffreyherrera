---
export const prerender = true;

import Layout from '../layouts/Layout.astro';
import { getAbout } from '../sanity/queries';
import type { About } from '../sanity/types';
import SanityImage from '../components/SanityImage.astro';
import PortableTextComponent from '../components/PortableText.tsx';

const about = await getAbout();

if (!about) {
  throw new Error("About data not found");
}
---

<Layout>
  <div class="py-6 bg-stone-50 container-grid">
    {(
      <>
        <section class="fixed bottom-8 left-8 z-10" data-scroll-reveal='{"animation": "slideUp", "delay": 800, "duration": 600}'>
          {about.profileImage && (
            <div class="w-64 aspect-3/4">
              <SanityImage 
                source={about.profileImage}
                alt={about.profileImage.alt || about.title}
                variant="profile"
                class="w-full h-full object-cover rounded"
                priority={true}
              />
            </div>
          )}
        </section>
        <section class="my-16 col-span-3 col-start-9" data-scroll-reveal='{"animation": "slideUp", "delay": 200, "duration": 600}'>
          <div class="prose prose-stone max-w-none">
            <PortableTextComponent value={about.bio} client:load />
          </div>
          {about.contact && (
              <div data-scroll-reveal='{"animation": "slideUp", "delay": 400, "duration": 600}'>
                <p class="font-semibold mt-12 mb-6">Get In Touch</p>
                <div class="bg-white rounded-lg p-6 shadow-sm">
                  <div class="space-y-4">
                    <div>
                      <span class="font-medium">Email: </span>
                      <a href={`mailto:${about.contact.email}`} class="text-orange-600 hover:underline">
                        {about.contact.email}
                      </a>
                    </div>
                    
                    <div class="flex gap-6">
                      {about.contact.instagram && (
                        <a href={about.contact.instagram} target="_blank" rel="noopener noreferrer" class="text-orange-600 hover:underline">
                          Instagram
                        </a>
                      )}
                      {about.contact.linkedin && (
                        <a href={about.contact.linkedin} target="_blank" rel="noopener noreferrer" class="text-orange-600 hover:underline">
                          LinkedIn
                        </a>
                      )}
                    </div>
                  </div>
                </div>
              </div>
          )}
        </section>

      </>
    )}
  </div>
</Layout>

<style>
  /* Scroll reveal animations */
  [data-scroll-reveal] {
    opacity: 0;
    transition: none;
  }

  [data-scroll-reveal].scroll-revealed {
    opacity: 1;
  }
</style>

<script>
  // Scroll reveal functionality
  class ScrollReveal {
    private observer: IntersectionObserver | null = null;

    constructor() {
      this.setupScrollReveal();
    }

    private setupScrollReveal(): void {
      if (!('IntersectionObserver' in window)) return;

      this.observer = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            const element = entry.target as HTMLElement;
            const config = this.getElementConfig(element);
            
            setTimeout(() => {
              this.triggerScrollReveal(element, config);
            }, config.delay || 0);
            
            this.observer?.unobserve(element);
          }
        });
      }, {
        threshold: 0.1,
        rootMargin: '-50px 0px'
      });

      // Observe elements with scroll reveal
      document.querySelectorAll('[data-scroll-reveal]').forEach(el => {
        const element = el as HTMLElement;
        const config = this.getElementConfig(element);
        
        // Set initial state
        element.style.opacity = '0';
        element.style.transform = this.getInitialTransform(config.animation);
        element.style.transition = 'none';
        
        this.observer?.observe(element);
      });
    }

    private getElementConfig(element: HTMLElement) {
      try {
        const configAttr = element.getAttribute('data-scroll-reveal');
        if (configAttr) {
          return { 
            animation: 'fadeIn', 
            duration: 500, 
            delay: 0, 
            ...JSON.parse(configAttr) 
          };
        }
      } catch (error) {
        console.warn('Invalid scroll reveal config:', error);
      }
      return { animation: 'fadeIn', duration: 500, delay: 0 };
    }

    private triggerScrollReveal(element: HTMLElement, config: any): void {
      element.style.transition = `all ${config.duration}ms cubic-bezier(0.4, 0, 0.2, 1)`;
      
      requestAnimationFrame(() => {
        requestAnimationFrame(() => {
          element.style.opacity = '1';
          element.style.transform = 'none';
          element.classList.add('scroll-revealed');
        });
      });
    }

    private getInitialTransform(animation: string): string {
      switch (animation) {
        case 'slideUp': return 'translateY(30px)';
        case 'slideLeft': return 'translateX(30px)';
        case 'slideRight': return 'translateX(-30px)';
        case 'scale': return 'scale(0.9)';
        case 'fadeIn': 
        default: return 'translateY(20px)';
      }
    }
  }

  // Initialize scroll reveal when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    new ScrollReveal();
  });
</script>
