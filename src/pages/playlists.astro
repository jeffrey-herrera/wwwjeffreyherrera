---
import Layout from '../layouts/Layout.astro';
import PlaylistCard from '../components/PlaylistCard.astro';
import PlaylistFilters from '../components/PlaylistFilters.astro';
import { getAllPlaylists } from '../sanity/queries';

const playlists = await getAllPlaylists();

// Get unique years for dropdown
const uniqueYears = [...new Set(playlists.map(p => p.year))].sort((a, b) => b - a);

// Season mapping function
const getSeasonFromMonth = (month: string): string => {
  const monthMap: Record<string, string> = {
    'january': 'winter', 'february': 'winter', 'march': 'spring',
    'april': 'spring', 'may': 'spring', 'june': 'summer',
    'july': 'summer', 'august': 'summer', 'september': 'fall',
    'october': 'fall', 'november': 'fall', 'december': 'winter'
  };
  return monthMap[month.toLowerCase()] || 'unknown';
};

// Get unique seasons
const uniqueSeasons = [...new Set(playlists.map(p => getSeasonFromMonth(p.month)))];
const seasonOrder = ['spring', 'summer', 'fall', 'winter'];
const sortedSeasons = seasonOrder.filter(season => uniqueSeasons.includes(season));

// Prepare dropdown options
const yearOptions = uniqueYears.map(year => ({ 
  value: year.toString(), 
  label: year.toString() 
}));

const seasonOptions = sortedSeasons.map(season => ({ 
  value: season, 
  label: season.charAt(0).toUpperCase() + season.slice(1) 
}));

// Month order mapping for sorting (December = 12, January = 1)
const monthOrder: Record<string, number> = {
  'december': 12, 'november': 11, 'october': 10, 'september': 9,
  'august': 8, 'july': 7, 'june': 6, 'may': 5,
  'april': 4, 'march': 3, 'february': 2, 'january': 1
};

// Group playlists by year
const playlistsByYear = playlists.reduce((acc, playlist) => {
  const year = playlist.year;
  if (!acc[year]) {
    acc[year] = [];
  }
  acc[year].push(playlist);
  return acc;
}, {} as Record<number, typeof playlists>);

// Sort playlists within each year by month (December to January)
Object.keys(playlistsByYear).forEach(year => {
  playlistsByYear[parseInt(year)].sort((a, b) => {
    const monthA = monthOrder[a.month.toLowerCase()] || 0;
    const monthB = monthOrder[b.month.toLowerCase()] || 0;
    return monthB - monthA; // Descending order (Dec to Jan)
  });
});

// Sort years in descending order
const sortedYears = Object.keys(playlistsByYear)
  .map(year => parseInt(year))
  .sort((a, b) => b - a);
---

<Layout 
  title="Playlists"
  description="Monthly music curation spanning different moods and moments. Discover curated playlists by Jeffrey Herrera."
>
  <div class="py-16" class="mb-24">
    <header class="mb-24">
      <h1 class="text-4xl font-serif mb-4">Playlists</h1>
      <p class="text-xl text-stone-500">The sound indexâ€”a monthly personal timeline in music.</p>
    </header>

    <!-- Filter Section -->
    <PlaylistFilters 
      years={uniqueYears} 
      seasons={sortedSeasons} 
    />

    <main class="space-y-16" id="playlists-container">
      {sortedYears.map((year) => (
        <section data-year-section={year}>
          <h2 class="text-xl font-serif mb-8 text-stone-800">{year}</h2>
          <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-6 gap-6">
            {playlistsByYear[year].map((playlist, index) => (
              <div 
                data-scroll-reveal={`{"animation": "slideUp", "delay": ${index * 50}, "duration": 500}`}
                data-playlist={JSON.stringify({
                  name: playlist.name,
                  year: playlist.year,
                  month: playlist.month,
                  spotifyUrl: playlist.spotifyUrl,
                  slug: playlist.slug
                })}
              >
                <PlaylistCard playlist={playlist} />
              </div>
            ))}
          </div>
        </section>
      ))}
    </main>
  </div>
</Layout>

<script>

  // Playlist filtering functionality
  class PlaylistFilter {
    constructor() {
      this.init();
    }

    private init(): void {
      // Listen for custom events from React component
      window.addEventListener('filterChange', (e: Event) => {
        const customEvent = e as CustomEvent;
        this.filterPlaylists(customEvent.detail.year, customEvent.detail.season);
      });

      window.addEventListener('feelingLucky', () => {
        this.feelingLucky();
      });
    }

    private getSeasonFromMonth(month: string): string {
      const monthMap: Record<string, string> = {
        'january': 'winter', 'february': 'winter', 'march': 'spring',
        'april': 'spring', 'may': 'spring', 'june': 'summer',
        'july': 'summer', 'august': 'summer', 'september': 'fall',
        'october': 'fall', 'november': 'fall', 'december': 'winter'
      };
      return monthMap[month.toLowerCase()] || 'unknown';
    }

    private filterPlaylists(selectedYear: string, selectedSeason: string): void {
      const sections = document.querySelectorAll('[data-year-section]');
      
      sections.forEach(section => {
        const sectionYear = section.getAttribute('data-year-section');
        const playlistCards = section.querySelectorAll('[data-playlist]');
        let visibleCards = 0;

        // Show/hide section based on year filter
        if (selectedYear && sectionYear !== selectedYear) {
          (section as HTMLElement).style.display = 'none';
          return;
        } else {
          (section as HTMLElement).style.display = 'block';
        }

        // Filter individual playlists by season
        playlistCards.forEach(card => {
          try {
            const playlistData = JSON.parse(card.getAttribute('data-playlist') || '{}');
            const playlistSeason = this.getSeasonFromMonth(playlistData.month || '');
            
            if (selectedSeason && playlistSeason !== selectedSeason) {
              (card as HTMLElement).style.display = 'none';
            } else {
              (card as HTMLElement).style.display = 'block';
              visibleCards++;
            }
          } catch (e) {
            console.warn('Failed to parse playlist data:', e);
          }
        });

        // Hide section if no cards are visible
        if (visibleCards === 0) {
          (section as HTMLElement).style.display = 'none';
        }
      });
    }

    private feelingLucky(): void {
      const visiblePlaylists: any[] = [];
      const sections = document.querySelectorAll('[data-year-section]');
      
      sections.forEach(section => {
        if ((section as HTMLElement).style.display !== 'none') {
          const cards = section.querySelectorAll('[data-playlist]');
          cards.forEach(card => {
            if ((card as HTMLElement).style.display !== 'none') {
              const data = card.getAttribute('data-playlist');
              if (data) {
                try {
                  visiblePlaylists.push(JSON.parse(data));
                } catch (e) {
                  console.warn('Failed to parse playlist data:', e);
                }
              }
            }
          });
        }
      });

      if (visiblePlaylists.length > 0) {
        const randomPlaylist = visiblePlaylists[Math.floor(Math.random() * visiblePlaylists.length)];
        if (randomPlaylist.spotifyUrl) {
          window.open(randomPlaylist.spotifyUrl, '_blank');
        }
      }
    }
  }

  // Initialize playlist filter when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    new PlaylistFilter();
  });
</script>


