---
export const prerender = true;

import Layout from '../layouts/Layout.astro';
import { getAllProjects } from '../sanity/queries';
import Hero from '../components/Hero.astro';
import WorkItem from '../components/WorkItem.astro';
import { Image } from 'astro:assets';

const allProjects = await getAllProjects();

// Filter projects by category for work grid (case-insensitive)
const brandProjects = allProjects.filter(p => p.category?.toLowerCase() === 'brand').slice(0, 5);
const physicalProjects = allProjects.filter(p => p.category?.toLowerCase() === 'physical').slice(0, 5);
const digitalProjects = allProjects.filter(p => p.category?.toLowerCase() === 'digital').slice(0, 5);

// Fallback: if no specific categories, distribute all projects
const fallbackProjects = allProjects.slice(0, 15);
const finalBrandProjects = brandProjects.length > 0 ? brandProjects : fallbackProjects.slice(0, 5);
const finalPhysicalProjects = physicalProjects.length > 0 ? physicalProjects : fallbackProjects.slice(5, 10);
const finalDigitalProjects = digitalProjects.length > 0 ? digitalProjects : fallbackProjects.slice(10, 15);

// Debug log to see what we have
console.log('All projects:', allProjects.length);
console.log('Brand projects:', brandProjects.length);
console.log('Physical projects:', physicalProjects.length);
console.log('Digital projects:', digitalProjects.length);
if (allProjects.length > 0) {
  console.log('First project categories:', allProjects.slice(0, 3).map(p => ({ title: p.title, category: p.category })));
}
---

<Layout>
  <Hero />
  <section class="sticky top-16">
    <div class="w-[33%] rounded-t-sm h-4 md:h-6 bg-orange-500 mt-24 md:mt-48 pb-8" />
        <div class="selected-work w-full h-24 md:h-[9.375rem] relative overflow-hidden rounded-tr-lg bg-orange-500" id="marquee-section" data-speed="80">
       <!-- Optimized background image -->
          <Image 
            src="/images/selected-work.png" 
            alt="Selected work background"
            width={1920}
            height={150}
            class="absolute inset-0 w-full h-full object-contain scale-115 md:scale-100 md:object-cover object-center md:object-top"
            loading="eager"
            format="webp"
          />
       <div class="marquee-container h-full flex items-center relative z-10 pb-4">
           <div class="marquee-content flex items-center gap-16 whitespace-nowrap flex-nowrap" id="marquee-content">
       </div>
       </div>
     </div>
  </section>
  <section class="sticky top-16 -mt-10">
    <div class="w-[33%] ml-[33%] rounded-t-sm h-4 md:h-6 bg-stone-950 pb-8" />
    <div class="w-full rounded-tr-lg bg-stone-950 block py-8 px-6 text-stone-300">
      <div class="brand-container mb-32">
        <div class="work-header flex gap-1 items-center mb-4">
          <span class="text-xs text-orange-400 text-right leading-none">01<br />↗</span>
          <h3 class="text-stone-50 text-xl lg:text-3xl font-serif tracking-tight">Brand</h3>
        </div>
        <div class="work-grid">
          {finalBrandProjects.length > 0 ? (
            <>
              <WorkItem project={finalBrandProjects[0]} size="large" />
              {finalBrandProjects[1] && <WorkItem project={finalBrandProjects[1]} size="small" />}
              {finalBrandProjects[2] && <WorkItem project={finalBrandProjects[2]} size="small" />}
              {finalBrandProjects[3] && <WorkItem project={finalBrandProjects[3]} size="small" />}
              {finalBrandProjects[4] && <WorkItem project={finalBrandProjects[4]} size="small" />}
            </>
          ) : (
            <div class="text-stone-400 text-center py-8">No Brand projects found</div>
          )}
        </div>
      </div>
      <div class="physical-container mb-32">
        <div class="work-header flex gap-1 items-center mb-4">
          <span class="text-xs text-orange-400 text-right leading-none">02<br />↗</span>
          <h3 class="text-stone-50 text-xl lg:text-3xl font-serif tracking-tight">Physical</h3>
        </div>
        <div class="work-grid">
          {finalPhysicalProjects.length > 0 ? (
            <>
              <WorkItem project={finalPhysicalProjects[0]} size="large" />
              {finalPhysicalProjects[1] && <WorkItem project={finalPhysicalProjects[1]} size="small" />}
              {finalPhysicalProjects[2] && <WorkItem project={finalPhysicalProjects[2]} size="small" />}
              {finalPhysicalProjects[3] && <WorkItem project={finalPhysicalProjects[3]} size="small" />}
              {finalPhysicalProjects[4] && <WorkItem project={finalPhysicalProjects[4]} size="small" />}
            </>
          ) : (
            <div class="text-stone-400 text-center py-8">No Physical projects found</div>
          )}
        </div>
      </div>
      <div class="digital-container mb-32">
        <div class="work-header flex gap-1 items-center mb-4">
          <span class="text-xs text-orange-400 text-right leading-none">03<br />↗</span>
          <h3 class="text-stone-50 text-xl lg:text-3xl font-serif tracking-tight">Digital</h3>
        </div>
        <div class="work-grid">
          {finalDigitalProjects.length > 0 ? (
            <>
              <WorkItem project={finalDigitalProjects[0]} size="large" />
              {finalDigitalProjects[1] && <WorkItem project={finalDigitalProjects[1]} size="small" />}
              {finalDigitalProjects[2] && <WorkItem project={finalDigitalProjects[2]} size="small" />}
              {finalDigitalProjects[3] && <WorkItem project={finalDigitalProjects[3]} size="small" />}
              {finalDigitalProjects[4] && <WorkItem project={finalDigitalProjects[4]} size="small" />}
            </>
          ) : (
            <div class="text-stone-400 text-center py-8">No Digital projects found</div>
          )}
        </div>
  </section>
</Layout>

<script>
  // Dynamic marquee content generation
  class DynamicMarquee {
    private container: HTMLElement | null = null;
    private content: HTMLElement | null = null;

    constructor() {
      this.init();
    }

    private init(): void {
      this.container = document.getElementById('marquee-section');
      this.content = document.getElementById('marquee-content');
      
      if (!this.container || !this.content) return;

      this.setSpeed();
      this.generateContent();
      
      // Regenerate content on window resize
      window.addEventListener('resize', () => {
        this.generateContent();
      });
    }

    private setSpeed(): void {
      if (!this.container) return;
      
      // Get speed from data attribute (defaults to 30 seconds)
      const speed = this.container.getAttribute('data-speed') || '30';
      
      // Set CSS custom property for animation duration
      this.container.style.setProperty('--marquee-duration', `${speed}s`);
    }

    private generateContent(): void {
      if (!this.container || !this.content) return;

      // Get container width  
      const containerWidth = this.container.offsetWidth;
      
      // Simple approach: estimate units needed and generate plenty
      const estimatedUnits = Math.ceil(containerWidth / 150); // Rough estimate
      const totalUnits = estimatedUnits * 3; // Generate 3x for safety
      
      // Generate content with alternating pattern
      let contentHTML = '';
      for (let i = 0; i < totalUnits; i++) {
        contentHTML += '<span class="text-orange-100 text-sm md:text-base font-light uppercase pointer-events-none">↓</span>';
        contentHTML += '<span class="text-orange-100 text-sm md:text-base font-light uppercase pointer-events-none">Selected&nbsp;work</span>';
      }
      
      this.content.innerHTML = contentHTML;
    }
  }

  // Initialize when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    new DynamicMarquee();
  });
</script>
